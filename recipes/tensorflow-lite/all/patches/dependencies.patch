diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 0924ca9dacd..fed88560a02 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -146,37 +146,16 @@ set(TFLITE_TARGET_DEPENDENCIES "")
 find_package(absl REQUIRED)
 find_package(Eigen3 REQUIRED)
 find_package(farmhash REQUIRED)
-find_package(fft2d REQUIRED)
+find_package(fft REQUIRED)
 find_package(FlatBuffers REQUIRED)
 find_package(gemmlowp REQUIRED)
-if (NOT CMAKE_SYSTEM_PROCESSOR OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
-  find_package(NEON_2_SSE REQUIRED)
-  list(APPEND TFLITE_TARGET_DEPENDENCIES NEON_2_SSE::NEON_2_SSE)
-endif()
 find_package(cpuinfo REQUIRED)  #CPUINFO is used by XNNPACK and RUY library
-find_package(ml_dtypes REQUIRED)
 find_package(ruy REQUIRED)
-# Download necessary dependencies.
-# Download pthreadpool source package if it doesn't exist.
-if(SYSTEM_PTHREADPOOL)
-  find_library(PTHREADPOOL_LIB pthreadpool REQUIRED)
-elseif(NOT DEFINED PTHREADPOOL_SOURCE_DIR)
-    message(STATUS "Downloading pthreadpool to ${CMAKE_BINARY_DIR}/pthreadpool-source (define SYSTEM_PTHREADPOOL or PTHREADPOOL_SOURCE_DIR to avoid it)")
-    configure_file(cmake/DownloadPThreadPool.cmake "${CMAKE_BINARY_DIR}/pthreadpool-download/CMakeLists.txt")
-    execute_process(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
-      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/pthreadpool-download")
-    execute_process(COMMAND "${CMAKE_COMMAND}" --build .
-      WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/pthreadpool-download")
-    set(PTHREADPOOL_SOURCE_DIR "${CMAKE_BINARY_DIR}/pthreadpool-source" CACHE STRING "pthreadpool source directory")
-endif()
-# Configure pthreadpool
-if(NOT SYSTEM_PTHREADPOOL AND NOT TARGET pthreadpool)
-  set(PTHREADPOOL_BUILD_TESTS OFF CACHE BOOL "")
-  set(PTHREADPOOL_BUILD_BENCHMARKS OFF CACHE BOOL "")
-  set(PTHREADPOOL_ALLOW_DEPRECATED_API OFF CACHE BOOL "")
-  add_subdirectory(
-    "${PTHREADPOOL_SOURCE_DIR}"
-    "${CMAKE_BINARY_DIR}/pthreadpool")
+find_package(pthreadpool REQUIRED)
+if(TARGET flatbuffers::flatbuffers_shared)
+    set(FLATBUFFERS_TARGET flatbuffers::flatbuffers_shared)
+else()
+    set(FLATBUFFERS_TARGET flatbuffers::flatbuffers)
 endif()
 set(TF_TARGET_PRIVATE_OPTIONS "")
 if(CMAKE_CXX_COMPILER_ID MATCHES "Clang$")
@@ -188,6 +167,10 @@ endif()
 set(TFLITE_TARGET_PUBLIC_OPTIONS "-DEIGEN_NEON_GEBP_NR=4")
 set(TFLITE_TARGET_PRIVATE_OPTIONS "")
 set(TFLITE_TARGET_PRIVATE_DEFINITIONS "")
+if (NOT CMAKE_SYSTEM_PROCESSOR OR CMAKE_SYSTEM_PROCESSOR MATCHES "x86")
+        find_package(NEON_2_SSE REQUIRED)
+        list(APPEND TFLITE_TARGET_DEPENDENCIES NEON_2_SSE::NEON_2_SSE)
+endif()
 if(CMAKE_CXX_COMPILER_ID MATCHES "Clang$")
   # TFLite uses deprecated methods in neon2sse which generates a huge number of
   # warnings so surpress these until they're fixed.
@@ -465,6 +448,11 @@ if(_TFLITE_ENABLE_NNAPI)
   if(${TFLITE_ENABLE_NNAPI_VERBOSE_VALIDATION})
     list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DNNAPI_VERBOSE_VALIDATION")
   endif()
+
+  list(APPEND TFLITE_NNAPI_SRCS
+  "${TENSORFLOW_SOURCE_DIR}/thirdparty/ml_dtypes/include/float8.h"
+  "${TENSORFLOW_SOURCE_DIR}/thirdparty/ml_dtypes/include/int4.h"
+  )
 else()
   set(TFLITE_DELEGATES_NNAPI_SRCS
     "${TFLITE_SOURCE_DIR}/delegates/nnapi/nnapi_delegate_disabled.cc"
@@ -475,13 +463,15 @@ else()
 endif()
 if(TFLITE_ENABLE_XNNPACK)
   find_package(fp16_headers REQUIRED)
-  find_package(XNNPACK REQUIRED)
+  find_package(xnnpack REQUIRED)
+  find_package(pthreadpool REQUIRED)
   populate_tflite_source_vars("delegates/xnnpack"
     TFLITE_DELEGATES_XNNPACK_SRCS
     FILTER ".*(_test|_tester)\\.(cc|h)"
   )
   list(APPEND TFLITE_TARGET_DEPENDENCIES
-    XNNPACK
+    xnnpack::xnnpack
+    pthreadpool::pthreadpool
   )
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DTFLITE_BUILD_WITH_XNNPACK_DELEGATE")
 endif()
@@ -599,6 +589,7 @@ set(_ALL_TFLITE_SRCS
   ${TFLITE_SOURCE_DIR}/schema/conversion_metadata_generated.h
   ${TFLITE_SOURCE_DIR}/schema/schema_utils.cc
   ${TFLITE_SOURCE_DIR}/schema/schema_generated.h
+  ${TENSORFLOW_SOURCE_DIR}/tensorflow/core/public/version.h
 )
 add_library(tensorflow-lite
   ${_ALL_TFLITE_SRCS}
@@ -608,6 +599,11 @@ list(FILTER _ALL_TFLITE_HDRS INCLUDE REGEX ".*\\.h$")
 target_include_directories(tensorflow-lite
   PUBLIC $<BUILD_INTERFACE:${TENSORFLOW_SOURCE_DIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
 )
+if(_TFLITE_ENABLE_NNAPI)
+  target_include_directories(tensorflow-lite
+    PUBLIC ${TENSORFLOW_SOURCE_DIR}/thirdparty/ml_dtypes
+  )
+endif()
 target_link_libraries(tensorflow-lite
   PUBLIC
     Eigen3::Eigen
@@ -617,11 +613,10 @@ target_link_libraries(tensorflow-lite
     absl::strings
     absl::synchronization
     absl::variant
-    farmhash
+    farmhash::farmhash
     fft2d_fftsg2d
-    flatbuffers::flatbuffers
-    gemmlowp::gemmlowp
-    ml_dtypes
+    ${FLATBUFFERS_TARGET}
+    gemmlowp::eight_bit_int_gemm
     ruy::ruy
     pthreadpool
     ${CMAKE_DL_LIBS}
